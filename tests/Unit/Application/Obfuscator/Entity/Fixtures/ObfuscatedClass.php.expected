<?php

use Mockery;
use PhpUniter\PackageLaravel\PhpUnitTestHelper;
use Mockery\Adapter\Phpunit\MockeryTestCase;
class _obf373839Test extends MockeryTestCase
{
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373930, flow: 1, injection: foo("arg1", "arg2", 10)
    */
    public function test__obf373930Flow1()
    {
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic('_obf373938\\_obf373839');
        $selfObject_obf373839 = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('ASSERT_RETURN', $selfObject_obf373839->_obf373930('ASSERT_v', 'ASSERT_w'));
    }
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373930, flow: 01, injection: self::_obf373935
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373930, flow: 01, injection: foo("arg1", "arg2", 10)
    */
    public function test__obf373930Flow01()
    {
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic('_obf373938\\_obf373839');
        $selfObject_obf373839 = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('ASSERT_RETURN', $selfObject_obf373839->_obf373930('ASSERT_v', 'ASSERT_w'));
    }
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373930, flow: 001, injection: self::_obf373935
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373930, flow: 001, injection: foo("arg1", "arg2", 10)
    */
    public function test__obf373930Flow001()
    {
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic('_obf373938\\_obf373839');
        $selfObject_obf373839 = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('ASSERT_RETURN', $selfObject_obf373839->_obf373930('ASSERT_v', 'ASSERT_w'));
    }
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373930, flow: 000, injection: self::_obf373935
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373930, flow: 000, injection: foo("arg1", "arg2", 10)
    */
    public function test__obf373930Flow000()
    {
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic('_obf373938\\_obf373839');
        $selfObject_obf373839 = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals(10, $selfObject_obf373839->_obf373930('ASSERT_v', 'ASSERT_w'));
    }
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373931, flow: 1, injection: explode(",", $x)
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373931, flow: 1, injection: fTwo($argA, $argB, $argC, fThree($argD, $argE, $argF, $argG, $argH))
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373931, flow: 1, injection: count($colors)
    */
    public function test__obf373931Flow1()
    {
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic('_obf373938\\_obf373839');
        $selfObject_obf373839 = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('ASSERT_RETURN', $selfObject_obf373839->_obf373931('ASSERT_argA', 'ASSERT_argB', 'ASSERT_argC', 'ASSERT_argD', 'ASSERT_argE', 'ASSERT_argF', 'ASSERT_argG', 'ASSERT_argH'));
    }
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373931, flow: 0, injection: explode(",", $x)
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373931, flow: 0, injection: fTwo($argA, $argB, $argC, fThree($argD, $argE, $argF, $argG, $argH))
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373931, flow: 0, injection: count($colors)
    */
    public function test__obf373931Flow0()
    {
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic('_obf373938\\_obf373839');
        $selfObject_obf373839 = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('ASSERT_RETURN', $selfObject_obf373839->_obf373931('ASSERT_argA', 'ASSERT_argB', 'ASSERT_argC', 'ASSERT_argD', 'ASSERT_argE', 'ASSERT_argF', 'ASSERT_argG', 'ASSERT_argH'));
    }
    /**
    */
    public function test__obf373932Flow1()
    {
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic('_obf373938\\_obf373839');
        $selfObject_obf373839 = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('ASSERT_RETURN', $selfObject_obf373839->_obf373932('ASSERT_strA', 'ASSERT_strB', 'ASSERT_strC', 'ASSERT_strD'));
    }
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373932, flow: 0, injection: $foo->one("a", "b")->two("c", "d", "e")->three("fg")->four()
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373932, flow: 0, injection: a()->b()->c()
    */
    public function test__obf373932Flow0()
    {
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic('_obf373938\\_obf373839');
        $selfObject_obf373839 = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('ASSERT_RETURN', $selfObject_obf373839->_obf373932('ASSERT_strA', 'ASSERT_strB', 'ASSERT_strC', 'ASSERT_strD'));
    }
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: _obf373839, method: _obf373933, flow: , injection: foo()
    */
    public function test__obf373933Flow()
    {
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic('_obf373938\\_obf373839');
        $selfObject_obf373839 = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('ASSERT_RETURN', $selfObject_obf373839->_obf373933('ASSERT_strA', 'ASSERT_strB', 'ASSERT_strC', 'ASSERT_strD', 'ASSERT_strE'));
    }
}