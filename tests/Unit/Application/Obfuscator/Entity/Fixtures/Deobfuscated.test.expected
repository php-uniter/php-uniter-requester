<?php
namespace Uniter1\UniterRequester\Tests\Resulted\Foo\Bar\Application\Barbar\Entity;
use Uniter1\UniterRequester\PhpUnitTestHelper;

use Mockery;
use Mockery\Adapter\Phpunit\MockeryTestCase;
class FooTest extends MockeryTestCase
{
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: bar, flow: 1, injection: foo("arg1", "arg2", 10)
    */
    public function test_barFlow1()
    {
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic('Foo\Bar\Application\Barbar\Entity\\Foo');
        $selfObjectFoo = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('ASSERT_RETURN', $selfObjectFoo->bar('ASSERT_v', 'ASSERT_w'));
    }
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: bar, flow: 01, injection: self::FIRST
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: bar, flow: 01, injection: foo("arg1", "arg2", 10)
    */
    public function test_barFlow01()
    {
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic('Foo\Bar\Application\Barbar\Entity\\Foo');
        $selfObjectFoo = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('ASSERT_RETURN', $selfObjectFoo->bar('ASSERT_v', 'ASSERT_w'));
    }
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: bar, flow: 001, injection: self::FIRST
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: bar, flow: 001, injection: foo("arg1", "arg2", 10)
    */
    public function test_barFlow001()
    {
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic('Foo\Bar\Application\Barbar\Entity\\Foo');
        $selfObjectFoo = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('ASSERT_RETURN', $selfObjectFoo->bar('ASSERT_v', 'ASSERT_w'));
    }
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: bar, flow: 000, injection: self::FIRST
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: bar, flow: 000, injection: foo("arg1", "arg2", 10)
    */
    public function test_barFlow000()
    {
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic('Foo\Bar\Application\Barbar\Entity\\Foo');
        $selfObjectFoo = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals(10, $selfObjectFoo->bar('ASSERT_v', 'ASSERT_w'));
    }
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: fOne, flow: 1, injection: explode(",", $x)
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: fOne, flow: 1, injection: fTwo($argA, $argB, $argC, fThree($argD, $argE, $argF, $argG, $argH))
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: fOne, flow: 1, injection: count($colors)
    */
    public function test_fOneFlow1()
    {
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic('Foo\Bar\Application\Barbar\Entity\\Foo');
        $selfObjectFoo = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('ASSERT_RETURN', $selfObjectFoo->fOne('ASSERT_argA', 'ASSERT_argB', 'ASSERT_argC', 'ASSERT_argD', 'ASSERT_argE', 'ASSERT_argF', 'ASSERT_argG', 'ASSERT_argH'));
    }
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: fOne, flow: 0, injection: explode(",", $x)
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: fOne, flow: 0, injection: fTwo($argA, $argB, $argC, fThree($argD, $argE, $argF, $argG, $argH))
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: fOne, flow: 0, injection: count($colors)
    */
    public function test_fOneFlow0()
    {
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic('Foo\Bar\Application\Barbar\Entity\\Foo');
        $selfObjectFoo = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('ASSERT_RETURN', $selfObjectFoo->fOne('ASSERT_argA', 'ASSERT_argB', 'ASSERT_argC', 'ASSERT_argD', 'ASSERT_argE', 'ASSERT_argF', 'ASSERT_argG', 'ASSERT_argH'));
    }
    /**
    */
    public function test_fTwoFlow1()
    {
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic('Foo\Bar\Application\Barbar\Entity\\Foo');
        $selfObjectFoo = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('ASSERT_RETURN', $selfObjectFoo->fTwo('ASSERT_strA', 'ASSERT_strB', 'ASSERT_strC', 'ASSERT_strD'));
    }
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: fTwo, flow: 0, injection: $foo->one("a", "b")->two("c", "d", "e")->three("fg")->four()
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: fTwo, flow: 0, injection: a()->b()->c()
    */
    public function test_fTwoFlow0()
    {
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic('Foo\Bar\Application\Barbar\Entity\\Foo');
        $selfObjectFoo = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('ASSERT_RETURN', $selfObjectFoo->fTwo('ASSERT_strA', 'ASSERT_strB', 'ASSERT_strC', 'ASSERT_strD'));
    }
    /**
    * @uniter_chain_wrong_type Unknown type for injection chain. Context: class: Foo, method: fThree, flow: , injection: foo()
    */
    public function test_fThreeFlow()
    {
        $privateMethodClass = PhpUnitTestHelper::makeAllMethodsPublic('Foo\Bar\Application\Barbar\Entity\\Foo');
        $selfObjectFoo = Mockery::mock($privateMethodClass)->makePartial();
        $this->assertEquals('ASSERT_RETURN', $selfObjectFoo->fThree('ASSERT_strA', 'ASSERT_strB', 'ASSERT_strC', 'ASSERT_strD', 'ASSERT_strE'));
    }
}